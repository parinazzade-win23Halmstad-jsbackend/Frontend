@page "/courses"
@using Frontend.GraphQL

@attribute [StreamRendering]
@* @attribute [Authorize] *@

<PageTitle>Courses</PageTitle>

<section class="courses">
    <div class="container">
        <div class="header">
            <h1>Courses</h1>
            <form id="form-filters">
                <select>
                    <option>All categories</option>
                </select>
                <div class="input-search-group">
                    <input id="searchQuery" name="serachQuery" placeholder="Search course" />
                    <i class="fa-regular fa-search"></i>
                </div>
            </form>
        </div>

        <div class="courses-items">
            @if (courses == null)
            {
                <p>no courser</p>
            }
            else
            {
                @foreach (var course in courses)
                {
                    var link = $"courses/details/{course.Id})";
                    <a class="courses" href="@link" asp-route-id="@course.Id">

                        @if (course.IsBestseller)
                        {

                            <div class="bestseller">Best Seller</div>
                        }

                        <button class="btn btn-circle bookmark"><i class="fa-regular fa-bookmark"></i></button>

                        <img src="@course.ImageUri" alt="@course.Title" />
                        <div class="content">

                            <h5 class="title">@course.Title</h5>
                            <p class="aauthor"> By @course.Authors[0].Name</p>
                            <div class="pricing">
                                @*
                        @if (!decimal.IsNullOrEmpty(course.Prices.Discount))
                        {
                        <div class="discount">@course.Prices.Discount</div>
                        }

                        <div class="price @(decimal.IsNullOrEmpty(course.Prices.Discount)? "" : "discount-enabled")">@course.Prices.Price</div> *@
                            </div>
                            <div class="footer">

                                <div class="hours">
                                    <i class="fa-regular fa-clock"></i> @course.Hours hours
                                </div>

                                <div class="likes">
                                    <i class="fa-regular fa-thums-up"></i> @course.LikesInProcent (@course.LikesInNumber)
                                </div>
                            </div>
                        </div>
                    </a>
                }
            }
        </div>


    </div>
</section>

@code {
    private List<CourseModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery { Query = "{ getCourses { id isBestseller title authors { name } categories prices { price discount } imageUri } }" };
        var response = await Http.PostAsJsonAsync("http://localhost:7258/api/graphql", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result?.Data.GetProperty("getCourses").EnumerateArray()
            .Select(course => new CourseModel
                {
                    Id = course.GetProperty("id").GetString(),
                    IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                    ImageUri = course.GetProperty("imageUri").GetString(),
                    Title = course.GetProperty("title").GetString(),
                    Authors = course.GetProperty("authors").EnumerateArray().Select(author => new AuthorModel { Name = author.GetProperty("name").GetString() }).ToList(),
                    Prices = new PriceModel
                    {
                        Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
                        Discount = course.GetProperty("prices").GetProperty("discount").GetDecimal()
                    },
                    // Hours, LikesInNumber och LikesInProcent är inte inkluderade i GraphQL-svaret
                }).ToList();
        }
    }



    public class CourseModel
    {
        public string? Id { get; set; }
        public string? ImageUri { get; set; } 
        public string? ImageHeaderUri { get; set; }
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public string[]? Categories { get; set; }
        public string? Title { get; set; } = null!;
        public string Ingress { get; set; } = null!;
        public decimal? StarRating { get; set; }
        public string Reviews { get; set; } = null!;
        public string? LikesInProcent { get; set; } = null!;
        public string? LikesInNumber { get; set; } = null!;
        public string? Hours { get; set; } = null!;
        public List<AuthorModel> Authors { get; set; } = null!;
        public PriceModel Prices { get; set; } = null!;
        public ContentModel Content { get; set; } = null!;
    }

    public class AuthorModel
    {
        public string? Name { get; set; } = null!;
    }

    public class ContentModel
    {
        public string Description { get; set; } = null!;
        public string[] Includes { get; set; } = null!;
        public List<ProgramDetailItemModel> ProgramDetails { get; set; } = null!;
    }

    public class ProgramDetailItemModel
    {
        public int Id { get; set; }
        public string Title { get; set; } = null!;
        public string Description { get; set; } = null!;
    }

    public class PriceModel
    {
        public string? Currency { get; set; } = null!;
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
    }
}
