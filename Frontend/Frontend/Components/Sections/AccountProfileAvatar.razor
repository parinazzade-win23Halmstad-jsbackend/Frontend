@attribute [StreamRendering]
@using System.Net.Http.Headers

@if(user == null)
{
    <p>loading.....</p>
}
else
{
    <section class="account-profile">
        <div class="container">
         <aside>
                <div class="profile-image">
                    <img class="btn btn-circle" src="/images/uploads/profiles/@user.ProfileImage" alt="@user.FirstName @user.LastName" />
                    <EditForm  Model="@uploadModel" OnValidSubmit="HandleProfileUpload" >
                        <InputFile id="fileUploader" OnChange="HandleSelectedFiles" hidden  />
                        <label for="fileUploader" class="btn btn-circle">
                            <i class="fa-regular fa-refresh"></i>
                            </label>
                        
                    </EditForm>
                </div>
                <div class="profile-info">
                    <h3 class="displayname">@user.FirstName @user.LastName</h3>
                    <p>@user.Email</p>
                </div>
            </aside>
        </div>
    </section>
}

  

@code {
    private ApplicationUser user = default!;
    private MultipartFormDataContent uploadModel = new MultipartFormDataContent();
    private IBrowserFile? selectedFile;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDataAsync();
    }

    private void HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }
    private async Task LoadUserDataAsync()
    {
   
        user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
    }

    private async Task HandleProfileUpload()
    {
        if (selectedFile != null)
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15)); // Limit to 4MB
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await Http.PostAsync(Environment.GetEnvironmentVariable("FILEPROVIDER_UPLOAD_PROFILE_URI"), content);

            if (response.IsSuccessStatusCode)
            {
                await LoadUserDataAsync();
                StateHasChanged();
            }
            else
            {
                // Handle failure
                Console.Error.WriteLine("File upload failed.");
            }
        }
        else
        {
            Console.Error.WriteLine("No file selected.");
        }
    }
}